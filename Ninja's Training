// Ninja's training

// Dp code

// TC-O(n*4*3)=(n*12)  SC-O(n*4) where n is no. of days

  // Code--
  
   int ninjaTraining(int n, vector<vector<int>> &points)
{
    
    vector<vector<int>>dp(n,vector<int>(4,0));
    dp[0][0]=max(points[0][1], points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][1],points[0][0]);
    dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));
    
    for(int i=1;i<n;i++){
        for(int last=0;last<4;last++){
            dp[i][last]=0;
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    int p=points[i][task]+dp[i-1][task];
                    maxi=max(maxi,p);
                }
            }
            dp[i][last]=maxi;
        }
    }
    return dp[n-1][3];
}

// Space optimised code

 // TC-O(n*!2)  SC-0(1)
 
  // Code--
  
   int ninjaTraining(int n, vector<vector<int>> &points)
{
 
    vector<int>prev(4,0);
    prev[0]=max(points[0][1],points[0][2]);
    prev[1]=max(points[0][0],points[0][2]);
    prev[2]=max(points[0][1],points[0][0]);
    prev[3]=max(points[0][0],max(points[0][1],points[0][2]));
    for(int i=1;i<n;i++){
        vector<int>temp(4,0);
        for(int last=0;last<4;last++){
            temp[last]=0;
            int maxi=0;
            for(int task=0;task<3;task++){
              if(task!=last){
                  int p=points[i][task]+prev[task];
                  maxi=max(maxi,p);
              }
            }
            temp[last]=maxi;
        }
        prev=temp;
    }
    return prev[3];
}
