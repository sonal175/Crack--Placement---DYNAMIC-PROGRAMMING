// Unique Paths

// Dp code

 // TC-O(m*n)  SC=O(m*n)  where m and n are rows and columns
 
 // Code--
   
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) {
                    dp[i][j]=1;
                }else{
                    int r=0;
                    if(j-1>=0){
                        r=dp[i][j-1];
                    }
                    int b=0;
                    if(i-1>=0){
                        b=dp[i-1][j];
                    }
                    dp[i][j]=r+b;
                }
                
            }
        }
        return dp[m-1][n-1];
    }
    
    
   // Space optimised code
   
    // TC-O(m*n)  SC-O(n) where m and n are rows and columns
    
     // Code--
     
      int uniquePaths(int m, int n) {
        vector<int>prev(n,0);
        for(int i=0;i<m;i++){
            vector<int>curr(n,0);
            for(int j=0;j<n;j++){
                if(i==0 && j==0) {
                    curr[j]=1;
                }else{
                    int r=0;
                    if(j-1>=0){
                        r=curr[j-1];
                    }
                    int b=0;
                    if(i-1>=0){
                        b=prev[j];
                    }
                    curr[j]=r+b;
                }
                
            }
            prev=curr;
        }
        return prev[n-1];
    }
    
 // Time & space optimised code
 
  // TC-O(m) SC-O(1) where m is rows
  
   // Code---
   
     int uniquePaths(int m, int n) {
        int p=m+n-2;
        int r=m-1;
        double res=1;
        for(int i=1;i<=r;i++){
           res=res*(p-r+i) /i;
        }
        return (int)res;
    }
