// Minimum sum partition

 // Dp code--
  
  // TC-O(n*sum) SC-O(n*sum) where n and sum are size of array and sum of all elements of array
  
   // Code--
    
     	int minDifference(int arr[], int n)  { 
	    int sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
        }
        int k=sum;
        vector<vector<int>>dp(n,vector<int>(k+1,0));
    for(int i=0;i<n;i++) dp[i][0]=1;
    if(arr[0]<=k) dp[0][arr[0]]=1;
    for(int i=1;i<n;i++){
        for(int t=1;t<=k;t++){
            int ntake=dp[i-1][t];
            int take=0;
            if(arr[i]<=t){
                take=dp[i-1][t-arr[i]];
            }
            dp[i][t]=take || ntake;
        }
    }
     int mini=1e9;
     for(int s=0;s<=sum/2;s++){
         if(dp[n-1][s]==1){
             mini=min(mini,abs((sum-s)-s));
         }
     }
     return mini;
    }
    
  // Space optimised code
  
   //  TC-O(n*sum) SC-O(sum) where n and sum are size of array and sum of all elements of array
   
   // Code--
   
     	int minDifference(int arr[], int n)  { 
	    int sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
        }
        int k=sum;
        vector<int>prev(k+1,0),curr(k+1,0);
    prev[0]=curr[0]=1;
    if(arr[0]<=k) prev[arr[0]]=1;
    for(int i=1;i<n;i++){
        for(int t=1;t<=k;t++){
            int ntake=prev[t];
            int take=0;
            if(arr[i]<=t){
                take=prev[t-arr[i]];
            }
            curr[t]=take || ntake;
        }
        prev=curr;
    }
     int mini=1e9;
     for(int s=0;s<=sum/2;s++){
         if(prev[s]==1){
             mini=min(mini,abs((sum-s)-s));
         }
     }
     return mini;
    }
	
