// Minimum Falling Path Sum II

// Dp code

// TC-O(n*n*n)  SC-O(n*n)  where n and n are rows and columns

 // Code--
 
   ic:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<n;i++){
            dp[0][i]=grid[0][i];
        }
        
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                int mini=1e9;
                for(int k=0;k<n;k++){
                    if(k==j){
                        continue;
                    }else{
                        int u=grid[i][j]+dp[i-1][k];
                        mini=min(mini,u);
                    } 
                    
                }
                dp[i][j]=mini;
            }
        }
        int mini=INT_MAX;
        for(int i=0;i<n;i++){
            mini=min(mini,dp[m-1][i]);
        }
        return mini;
    }
    
    
 // Space optimised code
 
   // TC-O(n*n*n)  SC-O(n)  where n and n are rows and columns
   
    // Code---
    
     int minFallingPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<int>prev(n,0),curr(n,0);
        for(int i=0;i<n;i++){
            prev[i]=grid[0][i];
        }
        
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                int mini=1e9;
                for(int k=0;k<n;k++){
                    if(k==j){
                        continue;
                    }else{
                        int u=grid[i][j]+prev[k];
                        mini=min(mini,u);
                    } 
                    
                }
                curr[j]=mini;
            }
            prev=curr;
        }
        int mini=INT_MAX;
        for(int i=0;i<n;i++){
            mini=min(mini,prev[i]);
        }
        return mini;
    }
 
 
