// Cherry Pickup ||

// Dp code--

 // TC-O(m*n*n*9) SC-O(m*n*n) where m and n are rows and columns
 
  // Code--
  
  int cherryPickup(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
       vector<vector<vector<int>>>dp(m,vector<vector<int>>(n,vector<int>(n,0)));
        for(int j1=0;j1<n;j1++){
            for(int j2=0;j2<n;j2++){
                if(j1==j2) dp[m-1][j1][j2]=grid[m-1][j1];
                else dp[m-1][j1][j2]=grid[m-1][j1]+grid[m-1][j2];
            }
        }
        for(int i=m-2;i>=0;i--){
            for(int j1=0;j1<n;j1++){
                for(int j2=0;j2<n;j2++){
                    int maxi=-1e8;
                    for(int dj1=-1;dj1<=+1;dj1++){
                        for(int dj2=-1;dj2<=+1;dj2++){
                            int val=0;
                            if(j1==j2) val=grid[i][j1];
                            else val = grid[i][j1]+grid[i][j2];
                            if(j1+dj1>=0 && j1+dj1<n && j2+dj2>=0 && j2+dj2<n){
                                val+=dp[i+1][j1+dj1][j2+dj2];
                            }else{
                                val+=-1e8;
                            }
                            maxi=max(maxi,val);
                        }
                    }
                    dp[i][j1][j2]=maxi;
                }
            }
        }
        return dp[0][0][n-1];
    }
    
   // Space optimised code
   
   // TC-O(m*n*n*9)  SC-O(n*n) where m and n are rows and columns
   
   // Code--
   
     int cherryPickup(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
       vector<vector<int>>forw(n,vector<int>(n,0)),curr(n,vector<int>(n,0));
        for(int j1=0;j1<n;j1++){
            for(int j2=0;j2<n;j2++){
                if(j1==j2) forw[j1][j2]=grid[m-1][j1];
                else forw[j1][j2]=grid[m-1][j1]+grid[m-1][j2];
            }
        }
        for(int i=m-2;i>=0;i--){
            for(int j1=0;j1<n;j1++){
                for(int j2=0;j2<n;j2++){
                    int maxi=-1e8;
                    for(int dj1=-1;dj1<=+1;dj1++){
                        for(int dj2=-1;dj2<=+1;dj2++){
                            int val=0;
                            if(j1==j2) val=grid[i][j1];
                            else val = grid[i][j1]+grid[i][j2];
                            if(j1+dj1>=0 && j1+dj1<n && j2+dj2>=0 && j2+dj2<n){
                                val+=forw[j1+dj1][j2+dj2];
                            }else{
                                val+=-1e8;
                            }
                            maxi=max(maxi,val);
                        }
                    }
                    curr[j1][j2]=maxi;
                }
            }
            forw=curr;
        }
        return forw[0][n-1];
    }
