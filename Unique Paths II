// Unique Paths- II

// Dp code

// TC-O(m*n)  SC-O(m*n)

 // Code--
   
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                }else if(i==0 && j==0){
                    
                dp[i][j]=1;
            
                }else{
                    int u=0;
                    if(i-1>=0){
                     u=dp[i-1][j];
                    }
                    int l=0;
                       
                    if(j-1>=0){
                     l=dp[i][j-1];
                    }
                    dp[i][j]=u+l;
                    
                } 
            }
        }
        return dp[m-1][n-1];
    }
    
    
 // Space optimised code
 
  // TC-O(n*m) SC-O(n) where m and n are rows and columns
  
  
   // Code---
   
     int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<int>prev(n,0);
        for(int i=0;i<m;i++){
            vector<int>curr(n,0);
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1){
                    curr[j]=0;
                }else if(i==0 && j==0){
                    
                curr[j]=1;
            
                }else{
                    int u=0;
                    if(i-1>=0){
                     u=prev[j];
                    }
                    int l=0;
                       
                    if(j-1>=0){
                     l=curr[j-1];
                    }
                    curr[j]=u+l;
                    
                } 
            }
            prev=curr;
        }
        return prev[n-1];
    }
