// Unbounded knapsack

// Dp code--

// TC-O(n*w)  SC-O(n*w) where n and w are size of array and weight

 // Code--
 
  int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{  
    vector<vector<int>>dp(n,vector<int>(w+1,0));
    for(int i=weight[0];i<=w;i++){
        int j=i;
        while(j>=weight[0]){
            dp[0][i]+=profit[0];
            j-=weight[0];
        }
    }
    
    for(int i=1;i<n;i++){
        for(int j=0;j<=w;j++){
            int ntake=dp[i-1][j];
            int take=0;
            if(weight[i]<=j){
                take=dp[i][j-weight[i]]+profit[i];
            }
            dp[i][j]=max(take,ntake);
        }
    }
    return dp[n-1][w];
}


// Space optimised code--

 // TC-O(n*w)  SC-O(w) where n and w are size of array and weight

 // Code--
 
   int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{  
  vector<int>prev(w+1,0),curr(w+1,0);
    for(int i=weight[0];i<=w;i++){
        int j=i;
        while(j>=weight[0]){
            prev[i]+=profit[0];
            j-=weight[0];
        }
    }
    
    for(int i=1;i<n;i++){
        for(int j=0;j<=w;j++){
            int ntake=prev[j];
            int take=0;
            if(weight[i]<=j){
                take=curr[j-weight[i]]+profit[i];
            }
            curr[j]=max(take,ntake);
        }
        prev=curr;
    }
    return prev[w];
}


// More space optimised code ( using only one array)

 // TC-O(n*w)  SC-O(w) where n and w are size of array and weight

 // Code--
 
  int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{  
  vector<int>prev(w+1,0);
    for(int i=weight[0];i<=w;i++){
        int val=i/weight[0];
        prev[i]=val*profit[0];
    }
    
    for(int i=1;i<n;i++){
        for(int j=0;j<=w;j++){
            int ntake=prev[j];
            int take=0;
            if(weight[i]<=j){
                take=prev[j-weight[i]]+profit[i];
            }
            prev[j]=max(take,ntake);
        }
        
    }
    return prev[w];
}

  
  
 
