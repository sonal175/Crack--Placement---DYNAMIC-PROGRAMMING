// Minimum Path Sum

// Dp code

 // TC-O(m*n) SC-O(m*n)  where m and n are rows and columns
 
 // Code--
  
   int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0 ){
                    dp[i][j]=grid[i][j];
                }else{
                    int u= grid[i][j];
                    if(i-1>=0){
                        u+=dp[i-1][j];
                    }else{
                        u+=1e9;
                    }
                    int l= grid[i][j];
                    if(j-1>=0){
                        l+=dp[i][j-1];
                    }else{
                        l+=1e9;
                    }
                    dp[i][j]=min(u,l);
                }
            }
        }
        return dp[m-1][n-1];
    }
    
    // Space optimised code
    
     // TC-O(m*n) SC-O(n)  where m and n are rows and columns
     
      // Code--
      
        int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<int>prev(n,0);
        for(int i=0;i<m;i++){
            vector<int>curr(n,0);
            for(int j=0;j<n;j++){
                if(i==0 && j==0 ){
                    curr[j]=grid[i][j];
                }else{
                    int u= grid[i][j];
                    if(i-1>=0){
                        u+=prev[j];
                    }else{
                        u+=1e9;
                    }
                    int l=grid[i][j];
                    if(j-1>=0){
                        l+=curr[j-1];
                    }else{
                        l+=1e9;
                    }
                    curr[j]=min(u,l);
                }
            }
            prev=curr;
        }
        return prev[n-1];
    }
