// Triangle

// Dp code

 // TC-O(n*n)  SC-O(n*n) where n is the max index that i can go
 
  // Code--
  
     int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>>dp(n,vector<int>(n,0));
        for(int i=0;i<n;i++){
            dp[n-1][i]=triangle[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int b=triangle[i][j]+dp[i+1][j];
                int di=triangle[i][j]+dp[i+1][j+1];
                dp[i][j]=min(b,di);
            }
        }
        return dp[0][0];
    }


// Space optimised code

 // TC-O(n*n) SC-O(n) where n is the max index that i can go
 
  // Code--
  
   int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<int>forw(n,0);
        for(int i=0;i<n;i++){
            forw[i]=triangle[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            vector<int>curr(i+1,0); // or we can take vector<int>curr(n,0);
            for(int j=i;j>=0;j--){
                int b=triangle[i][j]+forw[j];
                int di=triangle[i][j]+forw[j+1];
                curr[j]=min(b,di);
            }
            forw=curr;
        }
        return forw[0];
    }
